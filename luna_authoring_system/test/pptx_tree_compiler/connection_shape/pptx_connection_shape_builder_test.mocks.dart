// Mocks generated by Mockito 5.4.5 from annotations
// in luna_authoring_system/test/pptx_tree_compiler/connection_shape/pptx_connection_shape_builder_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:luna_authoring_system/pptx_data_objects/transform.dart' as _i2;
import 'package:luna_authoring_system/pptx_tree_compiler/transform/pptx_transform_builder.dart'
    as _i4;
import 'package:luna_core/units/point.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTransform_0 extends _i1.SmartFake implements _i2.Transform {
  _FakeTransform_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePoint_1 extends _i1.SmartFake implements _i3.Point {
  _FakePoint_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PptxTransformBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPptxTransformBuilder extends _i1.Mock
    implements _i4.PptxTransformBuilder {
  @override
  _i2.Transform getTransform(Map<String, dynamic>? transformMap) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransform,
          [transformMap],
        ),
        returnValue: _FakeTransform_0(
          this,
          Invocation.method(
            #getTransform,
            [transformMap],
          ),
        ),
        returnValueForMissingStub: _FakeTransform_0(
          this,
          Invocation.method(
            #getTransform,
            [transformMap],
          ),
        ),
      ) as _i2.Transform);
}

/// A class which mocks [Transform].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransform extends _i1.Mock implements _i2.Transform {
  @override
  _i3.Point get offset => (super.noSuchMethod(
        Invocation.getter(#offset),
        returnValue: _FakePoint_1(
          this,
          Invocation.getter(#offset),
        ),
        returnValueForMissingStub: _FakePoint_1(
          this,
          Invocation.getter(#offset),
        ),
      ) as _i3.Point);

  @override
  set offset(_i3.Point? _offset) => super.noSuchMethod(
        Invocation.setter(
          #offset,
          _offset,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Point get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakePoint_1(
          this,
          Invocation.getter(#size),
        ),
        returnValueForMissingStub: _FakePoint_1(
          this,
          Invocation.getter(#size),
        ),
      ) as _i3.Point);

  @override
  set size(_i3.Point? _size) => super.noSuchMethod(
        Invocation.setter(
          #size,
          _size,
        ),
        returnValueForMissingStub: null,
      );
}
