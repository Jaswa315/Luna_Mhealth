// Mocks generated by Mockito 5.4.5 from annotations
// in luna_authoring_system/test/mocks/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:luna_authoring_system/pptx_data_objects/pptx_tree.dart' as _i5;
import 'package:luna_authoring_system/pptx_data_objects/section.dart' as _i3;
import 'package:luna_authoring_system/pptx_data_objects/shape.dart' as _i8;
import 'package:luna_authoring_system/pptx_data_objects/shape_type.dart' as _i9;
import 'package:luna_authoring_system/pptx_data_objects/slide.dart' as _i7;
import 'package:luna_authoring_system/pptx_data_objects/transform.dart' as _i4;
import 'package:luna_core/units/emu.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEMU_0 extends _i1.SmartFake implements _i2.EMU {
  _FakeEMU_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSection_1 extends _i1.SmartFake implements _i3.Section {
  _FakeSection_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransform_2 extends _i1.SmartFake implements _i4.Transform {
  _FakeTransform_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PptxTree].
///
/// See the documentation for Mockito's code generation for more information.
class MockPptxTree extends _i1.Mock implements _i5.PptxTree {
  MockPptxTree() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
      ) as String);

  @override
  set title(String? _title) => super.noSuchMethod(
        Invocation.setter(
          #title,
          _title,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get author => (super.noSuchMethod(
        Invocation.getter(#author),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#author),
        ),
      ) as String);

  @override
  set author(String? _author) => super.noSuchMethod(
        Invocation.setter(
          #author,
          _author,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.EMU get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: _FakeEMU_0(
          this,
          Invocation.getter(#width),
        ),
      ) as _i2.EMU);

  @override
  set width(_i2.EMU? _width) => super.noSuchMethod(
        Invocation.setter(
          #width,
          _width,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.EMU get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: _FakeEMU_0(
          this,
          Invocation.getter(#height),
        ),
      ) as _i2.EMU);

  @override
  set height(_i2.EMU? _height) => super.noSuchMethod(
        Invocation.setter(
          #height,
          _height,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Section get section => (super.noSuchMethod(
        Invocation.getter(#section),
        returnValue: _FakeSection_1(
          this,
          Invocation.getter(#section),
        ),
      ) as _i3.Section);

  @override
  set section(_i3.Section? _section) => super.noSuchMethod(
        Invocation.setter(
          #section,
          _section,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i7.Slide> get slides => (super.noSuchMethod(
        Invocation.getter(#slides),
        returnValue: <_i7.Slide>[],
      ) as List<_i7.Slide>);

  @override
  set slides(List<_i7.Slide>? _slides) => super.noSuchMethod(
        Invocation.setter(
          #slides,
          _slides,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Slide].
///
/// See the documentation for Mockito's code generation for more information.
class MockSlide extends _i1.Mock implements _i7.Slide {
  MockSlide() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set shapes(List<_i8.Shape>? _shapes) => super.noSuchMethod(
        Invocation.setter(
          #shapes,
          _shapes,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get fileName => (super.noSuchMethod(
        Invocation.getter(#fileName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#fileName),
        ),
      ) as String);

  @override
  set fileName(String? _fileName) => super.noSuchMethod(
        Invocation.setter(
          #fileName,
          _fileName,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Shape].
///
/// See the documentation for Mockito's code generation for more information.
class MockShape extends _i1.Mock implements _i8.Shape {
  MockShape() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.ShapeType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i9.ShapeType.picture,
      ) as _i9.ShapeType);

  @override
  _i4.Transform get transform => (super.noSuchMethod(
        Invocation.getter(#transform),
        returnValue: _FakeTransform_2(
          this,
          Invocation.getter(#transform),
        ),
      ) as _i4.Transform);

  @override
  set transform(_i4.Transform? transform) => super.noSuchMethod(
        Invocation.setter(
          #transform,
          transform,
        ),
        returnValueForMissingStub: null,
      );
}
