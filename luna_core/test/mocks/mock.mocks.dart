// Mocks generated by Mockito 5.4.5 from annotations
// in luna_core/test/mocks/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:flutter/widgets.dart' as _i4;
import 'package:luna_core/models/components/component.dart' as _i5;
import 'package:luna_core/models/pages/page.dart' as _i3;
import 'package:luna_core/models/pages/sequence_of_pages.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSequenceOfPages_0 extends _i1.SmartFake
    implements _i2.SequenceOfPages {
  _FakeSequenceOfPages_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePage_1 extends _i1.SmartFake implements _i3.Page {
  _FakePage_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_2 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [Page].
///
/// See the documentation for Mockito's code generation for more information.
class MockPage extends _i1.Mock implements _i3.Page {
  MockPage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.Component> get components => (super.noSuchMethod(
        Invocation.getter(#components),
        returnValue: <_i5.Component>[],
      ) as List<_i5.Component>);

  @override
  List<_i5.Component> get getPageComponents => (super.noSuchMethod(
        Invocation.getter(#getPageComponents),
        returnValue: <_i5.Component>[],
      ) as List<_i5.Component>);

  @override
  List<_i5.Component> get pageComponents => (super.noSuchMethod(
        Invocation.getter(#pageComponents),
        returnValue: <_i5.Component>[],
      ) as List<_i5.Component>);

  @override
  _i2.SequenceOfPages getsequenceOfPages() => (super.noSuchMethod(
        Invocation.method(
          #getsequenceOfPages,
          [],
        ),
        returnValue: _FakeSequenceOfPages_0(
          this,
          Invocation.method(
            #getsequenceOfPages,
            [],
          ),
        ),
      ) as _i2.SequenceOfPages);

  @override
  void addComponent(_i5.Component? component) => super.noSuchMethod(
        Invocation.method(
          #addComponent,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSequenceOfPages(_i2.SequenceOfPages? sequence) => super.noSuchMethod(
        Invocation.method(
          #setSequenceOfPages,
          [sequence],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeComponent(_i5.Component? component) => super.noSuchMethod(
        Invocation.method(
          #removeComponent,
          [component],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJson(
    Map<Object, String>? objectIdMap,
    Map<String, Map<String, dynamic>>? serializedDefinitions,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [
            objectIdMap,
            serializedDefinitions,
          ],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [SequenceOfPages].
///
/// See the documentation for Mockito's code generation for more information.
class MockSequenceOfPages extends _i1.Mock implements _i2.SequenceOfPages {
  MockSequenceOfPages() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Page> get sequenceOfPages => (super.noSuchMethod(
        Invocation.getter(#sequenceOfPages),
        returnValue: <_i3.Page>[],
      ) as List<_i3.Page>);

  @override
  _i3.Page getPage(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getPage,
          [index],
        ),
        returnValue: _FakePage_1(
          this,
          Invocation.method(
            #getPage,
            [index],
          ),
        ),
      ) as _i3.Page);

  @override
  void addPage(_i3.Page? page) => super.noSuchMethod(
        Invocation.method(
          #addPage,
          [page],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removePage(_i3.Page? page) => super.noSuchMethod(
        Invocation.method(
          #removePage,
          [page],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isLeftMostPage(_i3.Page? page) => (super.noSuchMethod(
        Invocation.method(
          #isLeftMostPage,
          [page],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isRightMostPage(_i3.Page? page) => (super.noSuchMethod(
        Invocation.method(
          #isRightMostPage,
          [page],
        ),
        returnValue: false,
      ) as bool);

  @override
  int getIndexOfPage(_i3.Page? page) => (super.noSuchMethod(
        Invocation.method(
          #getIndexOfPage,
          [page],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Page getLeftPage(_i3.Page? page) => (super.noSuchMethod(
        Invocation.method(
          #getLeftPage,
          [page],
        ),
        returnValue: _FakePage_1(
          this,
          Invocation.method(
            #getLeftPage,
            [page],
          ),
        ),
      ) as _i3.Page);

  @override
  _i3.Page getRightPage(_i3.Page? page) => (super.noSuchMethod(
        Invocation.method(
          #getRightPage,
          [page],
        ),
        returnValue: _FakePage_1(
          this,
          Invocation.method(
            #getRightPage,
            [page],
          ),
        ),
      ) as _i3.Page);

  @override
  Map<String, dynamic> toJson(
    Map<Object, String>? objectIdMap,
    Map<String, Map<String, dynamic>>? serializedDefinitions,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [
            objectIdMap,
            serializedDefinitions,
          ],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Component].
///
/// See the documentation for Mockito's code generation for more information.
class MockComponent extends _i1.Mock implements _i5.Component {
  MockComponent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Widget> render(_i7.Size? screenSize) => (super.noSuchMethod(
        Invocation.method(
          #render,
          [screenSize],
        ),
        returnValue: _i6.Future<_i4.Widget>.value(_FakeWidget_2(
          this,
          Invocation.method(
            #render,
            [screenSize],
          ),
        )),
      ) as _i6.Future<_i4.Widget>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
